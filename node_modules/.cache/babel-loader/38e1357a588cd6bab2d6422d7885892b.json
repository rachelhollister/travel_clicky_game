{"ast":null,"code":"import _objectSpread from \"/Users/rachelhollister/Desktop/click this/clickygame/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/rachelhollister/Desktop/click this/clickygame/src/components/GameLogic/index.js\";\nimport React, { Component } from \"react\";\nimport Nav from \"../NavBar\";\nimport Header from \"../Header\";\nimport Container from \"../Container\";\nimport Clicky from \"../Clicky\";\nimport Footer from \"../Footer\";\nimport data from \"../../data.json\";\n\nclass GameLogic extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data,\n      score: 0,\n      topScore: 0\n    };\n\n    this.handleCorrectGuess = newData => {\n      const _this$state = this.state,\n            topScore = _this$state.topScore,\n            score = _this$state.score;\n      const newScore = score + 1;\n      const newTopScore = Math.max(newScore, topScore);\n      this.setState({\n        data: this.shuffleData(newData),\n        score: newScore,\n        topScore: newTopScore\n      });\n    };\n\n    this.handleIncorrectGuess = data => {\n      this.setState({\n        data: this.resetData(data),\n        score: 0\n      });\n    };\n\n    this.resetData = data => {\n      const resetData = data.map(item => _objectSpread({}, item, {\n        clicked: false\n      }));\n      return this.shuffleData(resetData);\n    };\n\n    this.shuffleData = data => {\n      let i = data.length - 1;\n\n      while (i > 0) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = data[i];\n        data[i] = data[j];\n        data[j] = temp;\n        i--;\n      }\n\n      return data;\n    };\n\n    this.handleItemClick = id => {\n      let guessedCorrectly = false;\n      const newData = this.state.data.map(item => {\n        const newItem = _objectSpread({}, item);\n\n        if (newItem.id === id) {\n          if (!newItem.clicked) {\n            newItem.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return newItem;\n      });\n      guessedCorrectly ? this.handleCorrectGuess(newData) : this.handleIncorrectGuess(newData);\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      data: this.shuffleData(this.state.data)\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      score: this.state.score,\n      topScore: this.state.topScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.state.data.map(item => React.createElement(Clicky, {\n      key: item.id,\n      id: item.id,\n      shake: !this.state.score && this.state.topScore,\n      handleClick: this.handleItemClick,\n      image: item.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }))), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default GameLogic;","map":{"version":3,"sources":["/Users/rachelhollister/Desktop/click this/clickygame/src/components/GameLogic/index.js"],"names":["React","Component","Nav","Header","Container","Clicky","Footer","data","GameLogic","state","score","topScore","handleCorrectGuess","newData","newScore","newTopScore","Math","max","setState","shuffleData","handleIncorrectGuess","resetData","map","item","clicked","i","length","j","floor","random","temp","handleItemClick","id","guessedCorrectly","newItem","componentDidMount","render","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Nav from \"../NavBar\";\nimport Header from \"../Header\";\nimport Container from \"../Container\";\nimport Clicky from \"../Clicky\";\nimport Footer from \"../Footer\";\nimport data from \"../../data.json\";\n\nclass GameLogic extends Component {\n  state = {\n    data,\n    score: 0,\n    topScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ data: this.shuffleData(this.state.data) });\n  }\n\n\n  handleCorrectGuess = newData => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n\n    this.setState({\n      data: this.shuffleData(newData),\n      score: newScore,\n      topScore: newTopScore\n    });\n  };\n\n  handleIncorrectGuess = data => {\n    this.setState({\n      data: this.resetData(data),\n      score: 0\n    });\n  };\n\n  resetData = data => {\n    const resetData = data.map(item => ({ ...item, clicked: false }));\n    return this.shuffleData(resetData);\n  };\n\n  shuffleData = data => {\n    let i = data.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = data[i];\n      data[i] = data[j];\n      data[j] = temp;\n      i--;\n    }\n    return data;\n  };\n\n  handleItemClick = id => {\n    let guessedCorrectly = false;\n    const newData = this.state.data.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n        }\n      }\n      return newItem;\n    });\n    guessedCorrectly\n      ? this.handleCorrectGuess(newData)\n      : this.handleIncorrectGuess(newData);\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav score={this.state.score} topScore={this.state.topScore} />\n        <Header />\n        <Container>\n          {this.state.data.map(item => (\n            <Clicky\n              key={item.id}\n              id={item.id}\n              shake={!this.state.score && this.state.topScore}\n              handleClick={this.handleItemClick}\n              image={item.image}\n            />\n          ))}\n        </Container>\n          <Footer />  \n      </div>\n    );\n  }\n}\n\nexport default GameLogic;"]},"metadata":{},"sourceType":"module"}